#BlueJ class context
comment0.params=
comment0.target=java.lang.String\ toString()
comment0.text=\n\ This\ returns\ a\ string\ representation\ of\ the\ tree\n\ @return\ string\ representation\n
comment1.params=
comment1.target=void\ clear()
comment1.text=\n\ Clears\ the\ whole\ tree\n
comment10.params=node\ data
comment10.target=java.lang.Comparable\ recursiveGetter(Node,\ java.lang.Comparable)
comment11.params=data
comment11.target=java.lang.Comparable\ remove(java.lang.Comparable)
comment11.text=\n\ Removes\ the\ data\ from\ the\ tree\n\ Throws\ exception\ if\ data\ is\ null\n\ @param\ data-\ the\ data\ removed\n
comment12.params=parent\ node\ data\ direction
comment12.target=java.lang.Comparable\ removeFinder(Node,\ Node,\ java.lang.Comparable,\ java.lang.String)
comment13.params=node
comment13.target=Node\ getSmallestRightSide(Node)
comment14.params=
comment14.target=java.util.List\ preOrder()
comment14.text=\n\ Returns\ a\ list\ containing\ the\ nodes\ in\ \n\ pre-ordered\ format.\n\ @return\ the\ preordered\ list\n
comment15.params=list\ node
comment15.target=java.util.List\ preOrderIterator(java.util.List,\ Node)
comment16.params=
comment16.target=java.util.List\ levelOrder()
comment16.text=\n\ Returns\ a\ list\ containing\ nodes\n\ in\ level\ order.\n\ @return\ the\ level\ ordered\ list\n
comment17.params=
comment17.target=java.util.List\ inOrder()
comment17.text=\n\ Returns\ a\ list\ containing\ nodes\n\ in\ order.\n\ @return\ the\ in\ order\ list\n
comment18.params=list\ node
comment18.target=java.util.List\ inOrderIterator(java.util.List,\ Node)
comment19.params=
comment19.target=java.util.List\ postOrder()
comment19.text=\n\ Returns\ a\ list\ containing\ nodes\ \n\ in\ post\ order\n\ @return\ the\ post\ ordered\ list\n
comment2.params=
comment2.target=int\ size()
comment2.text=\n\ Returns\ the\ size\ of\ the\ tree\n\ @return\ size\ of\ the\ tree\n
comment20.params=list\ node
comment20.target=java.util.List\ postOrderIterator(java.util.List,\ Node)
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\n\ Returns\ if\ tree\ is\ empty\n\ @return\ if\ empty\n
comment4.params=data
comment4.target=void\ add(java.lang.Comparable)
comment4.text=\n\ This\ adds\ an\ element\ to\ the\ tree.\n\ Throws\ IllegalArgumentException\ if\ data\ is\ null\n\ @param\ data\ to\ be\ added\n
comment5.params=node\ data
comment5.target=void\ recursiveInsertion(Node,\ java.lang.Comparable)
comment6.params=c
comment6.target=void\ addAll(java.util.Collection)
comment6.text=\n\ Adds\ the\ elements\ of\ the\ collection\ to\ the\ \n\ tree.\ Null\ collections\ throw\ an\ exception\n\ @param\ c-\ the\ collection\n
comment7.params=data
comment7.target=boolean\ contains(java.lang.Comparable)
comment7.text=\n\ Returns\ if\ this\ tree\ contains\ the\ data\n\ Throws\ exception\ if\ data\ is\ null\n\ @param\ data-\ the\ data\n
comment8.params=node\ data
comment8.target=boolean\ recursiveFinder(Node,\ java.lang.Comparable)
comment9.params=data
comment9.target=java.lang.Comparable\ get(java.lang.Comparable)
comment9.text=\n\ Gets\ the\ data\ from\ the\ tree\n\ Throws\ exception\ if\ data\ is\ null\n\ @param\ data-\ the\ data\n\ @return\ the\ data\ from\ the\ tree\n
numComments=21
