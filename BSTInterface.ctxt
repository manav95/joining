#BlueJ class context
comment0.params=
comment0.target=java.lang.String\ toString()
comment0.text=\n\ The\ toString\ method\ is\ used\ for\ debugging\ purposes.\ \ The\ code\ is\ given\n\ to\ you\ in\ the\ assignment\ pdf,\ so\ use\ that\ code\ exactly.\ \ Do\ not\ change\n\ the\ spacing\ or\ anything.\ \ Literally\ copy\ and\ paste\ that\ exact\ code.\n\n
comment1.params=data
comment1.target=void\ add(java.lang.Object)
comment1.text=\n\ Add\ data\ to\ the\ binary\ search\ tree.\ \ All\ data\ to\ the\ left\ of\n\ a\ node\ must\ be\ less\ than\ it,\ and\ all\ data\ to\ the\ right\ must\ be\n\ greater\ than\ it.\ If\ the\ data\ is\ null\ throw\ IllegalArgumentException.\n\ Do\ not\ add\ duplicate\ data\ to\ the\ tree.\n\ \n\ @param\ data\ Data\ to\ be\ added\ to\ the\ tree.\n\ \ \ \ \ \ \ \ \ \ \ \ \n
comment10.params=
comment10.target=boolean\ isEmpty()
comment10.text=\n\ Test\ to\ see\ if\ the\ tree\ is\ empty.\n\ \n\ @return\ Return\ true\ if\ the\ tree\ is\ empty,\ false\ otherwise.\n
comment11.params=
comment11.target=int\ size()
comment11.text=\n\ \n\ @return\ Return\ the\ number\ of\ elements\ in\ the\ tree.\n
comment12.params=
comment12.target=void\ clear()
comment12.text=\n\ Clear\ the\ tree.\n
comment2.params=c
comment2.target=void\ addAll(java.util.Collection)
comment2.text=\n\ Add\ the\ contents\ of\ the\ collection\ to\ the\ BST.\ \n\ If\ the\ data\ is\ null\ throw\ IllegalArgumentException.\n\ \n\ @param\ collection\ A\ collection\ of\ data\ to\ be\ added\ to\ the\ tree.\n\ \ \ \ \ \ \ \ \ \ \ \ \n
comment3.params=data
comment3.target=java.lang.Object\ remove(java.lang.Object)
comment3.text=\n\ Remove\ the\ data\ element\ from\ the\ tree.\n\ \n\ In\ the\ case\ that\ a\ node\ you\ want\ to\ remove\ has\ two\ children\n\ replace\ it\ with\ the\ successor.\ If\ the\ data\ is\ null\ throw\ \n\ IllegalArgumentException.\n\ \n\ @param\ data\ The\ data\ you\ want\ to\ remove.\n\ \ \ \ \ \ \ \ \ \ \ \ \n\ @return\ The\ data\ that\ was\ removed\ from\ the\ tree.\ Return\ null\ if\n\ \ \ \ \ \ \ \ \ the\ data\ doesn't\ exist.\n
comment4.params=data
comment4.target=java.lang.Object\ get(java.lang.Object)
comment4.text=\n\ Get\ the\ data\ from\ the\ tree.\n\ \n\ This\ method\ simply\ returns\ the\ data\ that\ was\ stored\ in\ the\ tree.\n\ If\ the\ data\ is\ null\ throw\ IllegalArgumentException.\n\n\ @param\ data\ The\ data\ you\ are\ searching\ for.\n\n\ @return\ The\ data\ that\ was\ found\ in\ the\ tree.\ Return\ null\ if\ the\ data\n\ \ \ \ \ \ \ \ \ doesn't\ exist.\n
comment5.params=data
comment5.target=boolean\ contains(java.lang.Object)
comment5.text=\n\ See\ if\ the\ tree\ contains\ the\ data.\n\ If\ the\ data\ is\ null\ throw\ IllegalArgumentException.\ \n\ \n\ @param\ data\ The\ data\ to\ search\ for\ in\ the\ tree.\n\ \ \ \ \ \ \ \ \ \ \ \ \n\ @return\ Return\ true\ if\ the\ data\ is\ in\ the\ tree,\ false\ otherwise.\n
comment6.params=
comment6.target=java.util.List\ preOrder()
comment6.text=\n\ Linearize\ the\ tree\ using\ the\ pre-order\ traversal.\n\ \n\ @return\ A\ list\ that\ contains\ every\ element\ in\ pre-order.\n
comment7.params=
comment7.target=java.util.List\ inOrder()
comment7.text=\n\ Linearize\ the\ tree\ using\ the\ in-order\ traversal.\n\ \n\ @return\ A\ list\ that\ contains\ every\ element\ in-order.\n
comment8.params=
comment8.target=java.util.List\ postOrder()
comment8.text=\n\ Linearize\ the\ tree\ using\ the\ post-order\ traversal.\n\ \n\ @return\ A\ list\ that\ contains\ every\ element\ in\ post-order.\n
comment9.params=
comment9.target=java.util.List\ levelOrder()
comment9.text=\n\ Linearize\ the\ tree\ using\ the\ level-order\ traversal.\n\ \n\ @return\ A\ list\ that\ contains\ every\ element\ in\ level-order.\n\n
numComments=13
